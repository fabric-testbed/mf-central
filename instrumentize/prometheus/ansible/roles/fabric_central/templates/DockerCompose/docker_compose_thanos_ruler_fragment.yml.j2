
# Central Thanos - Ruler
# Only needs to be run on central node or similar node that needs to connect
#   to the rack promethice to get the current data and to the s3 for 
#   long term data.

  thanos_ruler:
    container_name: "{{ install_name }}_thanos_ruler"

    image:  quay.io/thanos/thanos:v0.35.0

    volumes:
      # Map stores.yml file with the list of stores for easier live updates.
      ### NOT NEEDED USE QUERY - "{{ base_install_dir }}/thanos/config/stores.yml:/etc/thanos_stores/stores.yml"
      # Config files. Same as for Sidecar
      - "{{ base_install_dir }}/thanos/config/:/etc/thanos/"
      # Rule files 
      - "{{ base_install_dir }}/thanos/rules:/etc/thanos/rule_files"
      # Map the node certs for TLS. Required for grpc store endpoint
      - "{{ thanos_store_cert }}:/etc/thanos_certs/cert:ro"
      - "{{ thanos_store_key }}:/etc/thanos_certs/key:ro"
      ### Adding persistent data files
      # Persistent data files
      - "{{ base_data_dir }}/thanos/ruler/:/thanos/ruler" 

    command:
      - 'rule'

      # for where to send long term data 
      - '--objstore.config-file=/etc/thanos/object_store_config.yml'

      ### adding data-dir so data can be sent to long term object store?
      - '--data-dir=/thanos/ruler'  
      # TODO TEST THIS - '--tsdb.rotation=60d' 
      - '--eval-interval=30s'
      - '--rule-file=/etc/thanos/rule_files/*_rules.yml'
#??    --alert.query-url      "http://0.0.0.0:9090" \ # This tells what query URL to link to in UI.


      # for thanos store to get info from this ruler 
      - '--grpc-address=0.0.0.0:10901'
      - '--grpc-server-tls-cert=/etc/thanos_certs/cert'
      - '--grpc-server-tls-key=/etc/thanos_certs/key'

      # for alertmanager config file on where to send alerts 
      - '--alertmanagers.config-file=/etc/thanos/ruler_alertmanagers.yml'

      # for this ruler to make queries when evaluating rule expressions
      - '--query={{ install_name }}_thanos_query:10922'

      #- "--label=rack=\"\""
      - "--label=ruler=\"central\""




      # Optional debuging
      - '--log.level=info'  # debug, info
      - '--log.format=json' # logfmt logfmt or json                          

    logging:
      driver: json-file
      options:
        max-size: "1024m" 
        max-file: "5"

    restart: always
      